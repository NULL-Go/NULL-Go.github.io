<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://null-go.github.io</id>
    <title>PILOT</title>
    <updated>2021-03-09T14:27:39.313Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://null-go.github.io"/>
    <link rel="self" href="https://null-go.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://null-go.github.io/images/avatar.png</logo>
    <icon>https://null-go.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, PILOT</rights>
    <entry>
        <title type="html"><![CDATA[【Vue】解决动态绑定本地图片的问题]]></title>
        <id>https://null-go.github.io/post/vue-jie-jue-dong-tai-bang-ding-ben-di-tu-pian-de-wen-ti/</id>
        <link href="https://null-go.github.io/post/vue-jie-jue-dong-tai-bang-ding-ben-di-tu-pian-de-wen-ti/">
        </link>
        <updated>2021-03-09T14:19:41.000Z</updated>
        <content type="html"><![CDATA[<p>一开始出现这个问题是源自于Vue组件化，将一个复用的模块做出组件后，要求向子组件传递一个src引用一张<strong>本地</strong>的图片，传递过去src是一个变量，在img标签中单向绑定<strong>v-bind:src=</strong>。发现出错了，上网查找资料后发现是webpack的问题，webpack会将assets文件夹处理解析为<strong>模块依赖</strong>，具体原因不知道，因为对webpack还不了解😥😢。<br>
然后尝试require纯地址路径，还是error找不到module，最终解决，解决方法：<strong>require(path) ,path</strong>至少要有三部分组成, 目录+文件名+后缀，即：</p>
<pre><code>&lt;img :src=&quot;require('../../assets/images/'+pic+'.png')&quot;&gt;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【AJAX】同步和异步HTTP请求以混编模式]]></title>
        <id>https://null-go.github.io/post/ajax-tong-bu-he-yi-bu-http-qing-qiu-yi-hun-bian-mo-shi/</id>
        <link href="https://null-go.github.io/post/ajax-tong-bu-he-yi-bu-http-qing-qiu-yi-hun-bian-mo-shi/">
        </link>
        <updated>2021-03-09T00:29:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="web开发混编模式">web开发混编模式</h2>
<p>在html中嵌入php，jsp，asp等脚本语言(前后端不分离)，通过url地址请求页面加载不同的HTML页面的内容，所以每次页面有变化都需要重新请求服务器并等待服务器返回的HTML页面重新渲染，这样的方式是同步的。(用户必须等待服务器的返回后才进行其他操作)</p>
<h2 id="mvc模式">MVC模式</h2>
<h2 id="ajax-asynchronous-javascript-and-xml异步-javascript-和-xml">AJAX (“Asynchronous Javascript And XML”异步 JavaScript 和 XML)</h2>
<p>前端使用JavaScript的方法直接向服务器发起HTTP请求，获取XML/JSON等数据后进行处理，在不刷新页面的情况在操作HTML以达到重新渲染页面的作用。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【CSS】基础知识汇总]]></title>
        <id>https://null-go.github.io/post/css-ji-chu/</id>
        <link href="https://null-go.github.io/post/css-ji-chu/">
        </link>
        <updated>2021-03-07T03:12:47.000Z</updated>
        <content type="html"><![CDATA[<h2 id="引入css文件的三种形式">引入CSS文件的三种形式</h2>
<ol>
<li>外部样式表<br>
即用link标签 <code>&lt;link rel=&quot;stylesheet&quot; href=&quot;styles.css&quot;&gt;</code> 一般放在head标签里面的最后一个</li>
<li>内部样式表<br>
即用<code>style</code>标签引用 也是放在head标签最后一个</li>
<li>内联样式(难以维护，可读性变差)<br>
即在元素内部使用 style属性加入css样式</li>
</ol>
<h2 id="浏览器加载网页是怎么样加载的">浏览器加载网页是怎么样加载的</h2>
<ol>
<li>浏览器将 HTML文件渲染成一个DOM树，该过程为深度遍历</li>
<li>构建DOM树的同时，拉取额外资源，如图片，css，js文件(当遇到js代码时，渲染进程会停止解析 HTML，而去加载，解析和执行 JS 代码，停止解析 html 的原因在于 JS 可能会改变 DOM 的结构)</li>
<li>当CSS解析完后生成CSS规则树(CSS rule tree)</li>
<li>将CSS规则树与DOM树合并，构建渲染树（rendering tree）<br>
<img src="https://upload-images.jianshu.io/upload_images/8646214-c6a28b94fa802b8e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/641/format/webp" alt="avatar" loading="lazy"><br>
为了更好的用户体验，渲染引擎将会尽可能早的将内容呈现到屏幕上，并不会等到所有的html都解析完成之后再去构建和布局render树。它是解析完一部分内容就显示一部分内容，同时，可能还在通过网络下载其余内容。</li>
<li>布局和绘制</li>
</ol>
<h2 id="选择器">选择器</h2>
<ol>
<li>类选择器</li>
</ol>
<ul>
<li>指向特定元素的类 类后面.className，例span.span-1</li>
<li>多个类被应用时指向一个元素 两个类名连写，例.divBox.danger</li>
</ul>
<ol start="2">
<li>标签属性选择器  根据标签上的属性匹配值</li>
</ol>
<ul>
<li>[attr] 匹配带有attr属性的元素，例a[title] 匹配a标签且有title属性</li>
<li>[attr=&quot;value&quot;] 匹配带有attr属性的元素，且属性的值仅为value，不能有多个，例一个div元素有class=&quot;divOne divTwo&quot;  div[class=&quot;divOne&quot;]无法匹配它</li>
<li>[attr~=&quot;value&quot;] 解决了上述情况 单个值能匹配，多个属性值也能匹配(注:<strong>值是用空格隔开的</strong>)</li>
<li>[attr|=&quot;value&quot;] 可以匹配恰好为value的属性值，也可以匹配值value后面紧随一个连字符的值<br>
注：连字符 <strong>-</strong> [class|=&quot;div&quot;] 可以匹配class=&quot;div-1234&quot;<br>
除此之外，还有 <em>三个子字符串匹配选择器</em></li>
</ul>
<ol start="3">
<li>关系选择器</li>
</ol>
<ul>
<li>空格 <strong>后代选择器</strong>，特点是继承关系长，间接子元素也能匹配</li>
<li>&gt;  <strong>子代关系选择器</strong>，特点是只有直接子代能匹配</li>
<li>+ <strong>邻接兄弟选择器</strong>，特点是同级且必须在前者之后邻接才能匹配，注：匹配的是+后面的元素</li>
<li>~ <strong>通用兄弟选择符</strong>，特点是同级且不需要邻接，只需要之后，注：匹配的是~后面的元素<br>
tips: css样式匹配是从右往左 从DOM树叶子节点往根节点进行寻找匹配<br>
以便<em>尽早过滤掉一些无关的样式规则和元素</em></li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【JS】变量作用域与闭包]]></title>
        <id>https://null-go.github.io/post/js-bian-liang-zuo-yong-yu-yu-bi-bao/</id>
        <link href="https://null-go.github.io/post/js-bian-liang-zuo-yong-yu-yu-bi-bao/">
        </link>
        <updated>2021-03-03T11:16:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="词法环境">词法环境</h1>
<h2 id="pointer1-变量">pointer1 变量</h2>
<p>在JavaScript中，每个运行的<strong>函数</strong>，<strong>代码块 <strong>{...} 以及</strong>整个脚本</strong>，都有一个被称为词法环境（Lexical Environment） 的内部（隐藏）的关联对象，即词法环境对象（红宝书中称这个词法环境为<em>执行环境</em>，称这个内部隐藏的关联对象为<em>变量对象（函数叫活动对象）</em>）。</p>
<p>词法环境对象由两部分组成：</p>
<ol>
<li><strong>环境记录</strong>（Environment Record） —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 this 的值）的对象。</li>
<li>对<strong>外部词法环境</strong>的引用，与外部代码相关联。</li>
</ol>
<p>词法环境对象是一个规范的对象，只是它的隐藏的我们无法直接操作它。但 JavaScript 引擎同样可以优化它，比如清除未被使用的变量以节省内存和执行其他内部技巧等</p>
<h2 id="pointer2-函数声明">pointer2 函数声明</h2>
<p>一个函数其实也是一个值，就像变量一样。不同之处在于<strong>函数声明</strong>（不同于<strong>函数表达式</strong>的方式）的初始化会被立即完成。当创建了一个词法环境（Lexical Environment）时，函数声明会立即变为即用型函数（不像 let 那样直到声明处才用）</p>
<h2 id="pointer3-词法环境之间的引用">pointer3 词法环境之间的引用</h2>
<ol>
<li>在一个函数在刚开始被调用时，会创建一个新的词法环境以储存调用的参数以及函数局部变量（此阶段会自动取得两个重要的值: <strong>arguments</strong> 和 <strong>this</strong>），还会记录下来对外部词法环境的引用。当执行的代码要访问一个变量时，会从自己的词法环境开始搜索，若没有找到，则一层层通过对外部词法环境的引用继续寻找，直到全局词法环境。<br>
若没有找到，会报错（严格模式下），在非严格模式下会在全局词法环境中创建此变量。</li>
<li>在一个函数在刚开始被调用时，它所新创建的词法环境会被执行流push进环境栈中。</li>
</ol>
<h2 id="pointer4-创建函数">pointer4 创建函数</h2>
<p>所有的函数在“<strong>诞生</strong>”（即创建）时都会记住创建它们的词法环境。从技术上讲，这里没有什么魔法：所有函数都有名为 <strong>Environment</strong>的隐藏属性，该属性保存了对创建该函数的词法环境的引用。与函数在哪儿被调用无关。<strong>Environment</strong> 引用在函数创建时被设置并永久保存。（红宝书中称为<em>作用域链</em>，我认为两者应该是差不多的）</p>
<h1 id="闭包">闭包</h1>
<ol>
<li>闭包是指内部函数有权访问外部函数声明的变量以及参数，这是因为在函数被创建时，已经通过隐藏的<strong>Environment</strong>属性达到了引用外部词法环境的作用。</li>
<li>所有函数都是天生的闭包除了<strong>new Function</strong>外</li>
</ol>
<p>本次学习的的tips：</p>
<ol>
<li>函数声明和普通变量let的声明以及var的声明很不一样，在词法环境创建的时候，函数就已经声明且可以使用了，若是var定义的变量，会有变量提升，值为undefined，若是let声明的变量，它们处于“<strong>未初始化（Uninitialized</strong>）”状态。这是一种特殊的内部状态，这意味着引擎知道变量，但是在用 let 声明前，不能引用它。几乎就像变量不存在一样。</li>
<li>关于为什么new funtion语法不能闭包的原因。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP]]></title>
        <id>https://null-go.github.io/post/http/</id>
        <link href="https://null-go.github.io/post/http/">
        </link>
        <updated>2021-03-03T07:13:38.000Z</updated>
        <content type="html"><![CDATA[<p>p27 查询HTTP 服务器端支持的HTTP方法和类型</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown语法汇总]]></title>
        <id>https://null-go.github.io/post/k/</id>
        <link href="https://null-go.github.io/post/k/">
        </link>
        <updated>2021-03-02T11:37:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习javacsript">学习javacsript</h1>
<ul>
<li>学习java</li>
<li>学习数据库<br>
1 dawd</li>
</ul>
<ol>
<li>学习java</li>
<li>学习数据库</li>
</ol>
<blockquote>
<p>这是引用</p>
<blockquote>
<p>这是引用</p>
</blockquote>
</blockquote>
<pre><code class="language-javascript">  在此输入代码
</code></pre>
<p>这是一个链接<a href="https://null-go.github.io/">我的主页</a><br>
我们可以通过变量来设置一个链接，变量赋值在文档末尾进行<br>
[runoob]: http://www.runoob.com/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://null-go.github.io/post/hello-gridea/</id>
        <link href="https://null-go.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>