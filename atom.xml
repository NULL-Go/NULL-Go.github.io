<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://null-go.github.io</id>
    <title>PILOT</title>
    <updated>2021-03-03T13:03:00.479Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://null-go.github.io"/>
    <link rel="self" href="https://null-go.github.io/atom.xml"/>
    <subtitle>温故而知新</subtitle>
    <logo>https://null-go.github.io/images/avatar.png</logo>
    <icon>https://null-go.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, PILOT</rights>
    <entry>
        <title type="html"><![CDATA[【JS】变量作用域与闭包]]></title>
        <id>https://null-go.github.io/post/js-bian-liang-zuo-yong-yu-yu-bi-bao/</id>
        <link href="https://null-go.github.io/post/js-bian-liang-zuo-yong-yu-yu-bi-bao/">
        </link>
        <updated>2021-03-03T11:16:19.000Z</updated>
        <content type="html"><![CDATA[<h1 id="词法环境">词法环境</h1>
<h2 id="pointer1-变量">pointer1 变量</h2>
<p>在JavaScript中，每个运行的<strong>函数</strong>，<strong>代码块 <strong>{...} 以及</strong>整个脚本</strong>，都有一个被称为词法环境（Lexical Environment） 的内部（隐藏）的关联对象，即词法环境对象（红宝书中称这个词法环境为<em>执行环境</em>，称这个内部隐藏的关联对象为<em>变量对象</em>）。</p>
<p>词法环境对象由两部分组成：</p>
<ol>
<li><strong>环境记录</strong>（Environment Record） —— 一个存储所有局部变量作为其属性（包括一些其他信息，例如 this 的值）的对象。</li>
<li>对<strong>外部词法环境</strong>的引用，与外部代码相关联。</li>
</ol>
<p>词法环境对象是一个规范的对象，只是它的隐藏的我们无法直接操作它。但 JavaScript 引擎同样可以优化它，比如清除未被使用的变量以节省内存和执行其他内部技巧等</p>
<h2 id="pointer2-函数声明">pointer2 函数声明</h2>
<p>一个函数其实也是一个值，就像变量一样。不同之处在于<strong>函数声明</strong>（不同于<strong>函数表达式</strong>的方式）的初始化会被立即完成。当创建了一个词法环境（Lexical Environment）时，函数声明会立即变为即用型函数（不像 let 那样直到声明处才用）</p>
<h2 id="pointer3-词法环境之间的引用">pointer3 词法环境之间的引用</h2>
<ol>
<li>在一个函数在刚开始被调用时，会创建一个新的词法环境以储存调用的参数以及函数局部变量，还会记录下来对外部词法环境的引用。当执行的代码要访问一个变量时，会从自己的词法环境开始搜索，若没有找到，则一层层通过对外部词法环境的引用继续寻找，直到全局词法环境。<br>
若没有找到，会报错（严格模式下），在非严格模式下会在全局词法环境中创建此变量。</li>
<li>在一个函数在刚开始被调用时，它所新创建的词法环境会被执行流push进环境栈中。</li>
</ol>
<h2 id="pointer4-创建函数">pointer4 创建函数</h2>
<p>所有的函数在“<strong>诞生</strong>”（即创建）时都会记住创建它们的词法环境。从技术上讲，这里没有什么魔法：所有函数都有名为 <strong>Environment</strong>的隐藏属性，该属性保存了对创建该函数的词法环境的引用。与函数被在哪儿调用无关。<strong>Environment</strong> 引用在函数创建时被设置并永久保存。（红宝书中称为<em>作用域链</em>，我认为两者应该是差不多的）</p>
<h1 id="闭包">闭包</h1>
<ol>
<li>闭包是指内部函数有权访问外部函数声明的变量以及参数，这是因为在函数被创建时，已经通过隐藏的<strong>Environment</strong>属性达到了引用外部词法环境的作用。</li>
<li>所有函数都是天生的闭包除了<strong>new Function</strong>外</li>
</ol>
<p>本次学习的的tips：</p>
<ol>
<li>函数声明和普通变量let的声明以及var的声明很不一样，在词法环境创建的时候，函数就已经声明且可以使用了，若是var定义的变量，会有变量提升，值为undefined，若是let声明的变量，它们处于“<strong>未初始化（Uninitialized</strong>）”状态。这是一种特殊的内部状态，这意味着引擎知道变量，但是在用 let 声明前，不能引用它。几乎就像变量不存在一样。</li>
<li>关于为什么new funtion语法不能闭包的原因。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[HTTP]]></title>
        <id>https://null-go.github.io/post/http/</id>
        <link href="https://null-go.github.io/post/http/">
        </link>
        <updated>2021-03-03T07:13:38.000Z</updated>
        <content type="html"><![CDATA[<p>p27 查询HTTP 服务器端支持的HTTP方法和类型</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[打我打]]></title>
        <id>https://null-go.github.io/post/k/</id>
        <link href="https://null-go.github.io/post/k/">
        </link>
        <updated>2021-03-02T11:37:57.000Z</updated>
        <content type="html"><![CDATA[<h1 id="学习javacsript">学习javacsript</h1>
<ul>
<li>学习java</li>
<li>学习数据库<br>
1 dawd</li>
</ul>
<ol>
<li>学习java</li>
<li>学习数据库</li>
</ol>
<blockquote>
<p>这是引用</p>
<blockquote>
<p>这是引用</p>
</blockquote>
</blockquote>
<pre><code class="language-javascript">  在此输入代码
</code></pre>
<p>这是一个链接<a href="https://null-go.github.io/">我的主页</a><br>
我们可以通过变量来设置一个链接，变量赋值在文档末尾进行<br>
[runoob]: http://www.runoob.com/</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://null-go.github.io/post/hello-gridea/</id>
        <link href="https://null-go.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>